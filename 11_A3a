/*

Write C++ program to draw the following pattern. Use DDA line and Bresenhamâ€˜s
circle drawing algorithm. Apply the concept of encapsulation

*/

#include<iostream>
#include<graphics.h>
#include<math.h>

using namespace std;

class DDALine 
{	private:
		float delta_x,delta_y;
	public:
	void plotPixel(int x,int y){
		putpixel(x,y,WHITE);
	}
	void drawLine(float x1,float y1,float x2,float y2){
		int length,i;
		float dx,dy;
		dx = abs(x2-x1);
		dy = abs(y2-y1);
		if(dx>=dy)
			length = dx;
		else
			length=dy;              
		delta_x=(x2-x1)/length;
		delta_y=(y2-y1)/length;
		
		for(i=1 ;i <= length; i++){
			plotPixel(x1,y1);
			delay(20);
			x1=x1+delta_x;
			y1=y1+delta_y;
		}
	    }
    float getdelta_x()
	{
	    return delta_x;
	}
	float getdelta_y()
	{
	    return delta_y;
	}
};


class MyCircle 
{
private:
	int x,y;		
	
public: 
	void plotPixel(int x,int y) {
		putpixel(x,y,WHITE);
	}
	void display(int xc,int yc,int x,int y)	{
		plotPixel(xc+x,yc+y);
		plotPixel(xc+x,yc-y);
		plotPixel(xc-x,yc-y);
		plotPixel(xc-x,yc+y);
		plotPixel(xc+y,yc+x);
		plotPixel(xc+y,yc-x);
		plotPixel(xc-y,yc-x);
		plotPixel(xc-y,yc+x);
	}
	void drawCircle(int xc,int yc,int r) {
		int d0;
		x = 0;
		y = r;
		d0 = 3-2*r;
		while(x < y){
			if(d0<0){
				x = x + 1;
				d0 = d0 + 4 * x + 6;
			}
			else{
				x = x + 1;
				y = y - 1;
				d0 = d0 + 4 * (x-y) + 10;
			}
			display(xc,yc,x,y);
			delay(100);
		}
	}
	int getx(){
	    return x;
	}
	int gety(){
	    return y;
	}
};
	

int main()
{
	    int gd = DETECT, gm;
	    float side,x1,x2,y1,y2,x3,y3,xc,yc,t1,t2,t;
	    initgraph(&gd,&gm,NULL);
	    DDALine l;
        MyCircle c; 
		
     	x1=200;y1=200;side=200;
     	cout<<"x1="<<x1<<endl;
     	cout<<"y1="<<y1<<endl;
     	t=sqrt((side*side)-((side/2)*(side/2)));
     	cout<<"t="<<t<<endl;
     	x2=x1-(side/2);
     	cout<<"x2="<<x2<<endl;
     	y2=y1+t;
     	cout<<"y2="<<y2<<endl;
     	x3=x1+(side/2);
     	cout<<"x3="<<x3<<endl;
     	y3=y1+t;
     	cout<<"y3="<<y3<<endl;
     	xc=(x1+x2+x3)/3;
     	cout<<"xc="<<xc<<endl;
     	yc=(y1+y2+y3)/3;
     	cout<<"yc="<<yc<<endl;
     	t1=(side/sqrt(3));
     	cout<<"t1="<<t1<<endl;
     	t2=(side/(2*sqrt(3)));
     	cout<<"t2="<<t2<<endl;
     	l.drawLine(x1,y1,x2,y2);    	   
	  	l.drawLine(x2,y2,x3,y3);
		l.drawLine(x3,y3,x1,y1);
	    c.drawCircle(xc,yc,t1);
	    c.drawCircle(xc,yc,t2);
	    getch();
        closegraph();
	    return 0;
}


